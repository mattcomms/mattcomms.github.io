{"version":3,"names":[],"mappings":"","sources":["index.js"],"sourcesContent":["(function($) {\n\n  // revealContent //\n\n  var withinViewport = (function() {\n\n    'use strict';\n\n    // Cutting the mustard\n    // http://webfieldmanual.com/guides/cutting-the-mustard.html\n\n    if (window.requestAnimationFrame && document.documentElement.classList) {\n\n      // Passes the test so add enhanced class to HTML tag\n      document.documentElement.classList.add('enhanced');\n\n      // Throttle\n      // https://underscorejs.org/#throttle\n      var throttle = function(func, wait, options) {\n        var _ = {\n          now: Date.now || function() {\n            return new Date().getTime();\n          }\n        };\n        var context, args, result;\n        var timeout = null;\n        var previous = 0;\n        if (!options) {\n          options = {};\n        }\n        var later = function() {\n          previous = options.leading === false ? 0 : _.now();\n          timeout = null;\n          result = func.apply(context, args);\n          if (!timeout) {\n            context = args = null;\n          }\n        };\n        return function() {\n          var now = _.now();\n          if (!previous && options.leading === false) {\n            previous = now;\n          }\n          var remaining = wait - (now - previous);\n          context = this;\n          args = arguments;\n          if (remaining <= 0 || remaining > wait) {\n            if (timeout) {\n              clearTimeout(timeout);\n              timeout = null;\n            }\n            previous = now;\n            result = func.apply(context, args);\n            if (!timeout) {\n              context = args = null;\n            }\n          } else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n          }\n          return result;\n        };\n      };\n\n      // requestAnimationFrame\n      // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/\n      var _requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;\n\n      // Global class for revealing element\n      var revealer = document.querySelectorAll('.revealer');\n\n      // Get the viewport (window) dimensions\n      var getViewportSize = function() {\n        return {\n          width: window.document.documentElement.clientWidth,\n          height: window.document.documentElement.clientHeight\n        };\n      };\n\n      // Get the current scoll position\n      var getCurrentScroll = function() {\n        return {\n          x: window.pageXOffset,\n          y: window.pageYOffset\n        };\n      };\n\n      // Get element dimensions and position\n      var getElemInfo = function(elem) {\n        var offsetTop = 0;\n        var offsetLeft = 0;\n        var offsetHeight = elem.offsetHeight;\n        var offsetWidth = elem.offsetWidth;\n\n        do {\n          if (!isNaN(elem.offsetTop)) {\n            offsetTop += elem.offsetTop;\n          }\n          if (!isNaN(elem.offsetLeft)) {\n            offsetLeft += elem.offsetLeft;\n          }\n        } while ((elem = elem.offsetParent) !== null);\n\n        return {\n          top: offsetTop,\n          left: offsetLeft,\n          height: offsetHeight,\n          width: offsetWidth\n        };\n      };\n\n      // Check visibility of the element in the viewport\n      var checkVisibility = function(elem) {\n        var viewportSize = getViewportSize();\n        var currentScroll = getCurrentScroll();\n        var elemInfo = getElemInfo(elem);\n        var spaceOffset = 0.2;\n        var elemHeight = elemInfo.height;\n        var elemWidth = elemInfo.width;\n        var elemTop = elemInfo.top;\n        var elemLeft = elemInfo.left;\n        var elemBottom = elemTop + elemHeight;\n        var elemRight = elemLeft + elemWidth;\n\n        var checkBoundaries = function() {\n          // Defining the element boundaries and extra space offset\n          var top = elemTop + elemHeight * spaceOffset;\n          var left = elemLeft + elemWidth * spaceOffset;\n          var bottom = elemBottom - elemHeight * spaceOffset;\n          var right = elemRight - elemWidth * spaceOffset;\n\n          // Defining the window boundaries and window offset\n          var wTop = currentScroll.y + 0;\n          var wLeft = currentScroll.x + 0;\n          var wBottom = currentScroll.y - 0 + viewportSize.height;\n          var wRight = currentScroll.x - 0 + viewportSize.width;\n\n          // Check if the element is within boundary\n          return (top < wBottom) && (bottom > wTop) && (left > wLeft) && (right < wRight);\n        };\n\n        return checkBoundaries();\n      };\n\n      // Run a loop with checkVisibility() and add / remove classes to the elements\n      var toggleElement = function() {\n        for (var i = 0; i < revealer.length; i++) {\n          if (checkVisibility(revealer[i])) {\n            revealer[i].classList.add('revealed');\n          }\n        }\n      };\n\n      // Throttle events and requestAnimationFrame\n      var scrollHandler = throttle(function() {\n        _requestAnimationFrame(toggleElement);\n      }, 300);\n\n      var resizeHandler = throttle(function() {\n        _requestAnimationFrame(toggleElement);\n\n      }, 300);\n\n      scrollHandler();\n\n      // Listening for events\n      if (window.addEventListener) {\n        addEventListener('scroll', scrollHandler, false);\n        addEventListener('resize', resizeHandler, false);\n      } else if (window.attachEvent) {\n        window.attachEvent('onscroll', scrollHandler);\n        window.attachEvent('onresize', resizeHandler);\n      } else {\n        window.onscroll = scrollHandler;\n        window.onresize = resizeHandler;\n      }\n\n    }\n\n\n    return withinViewport;\n\n  }());\n\n\n\n(function($) {\n  var acc = document.getElementsByClassName(\"accordion\");\n  var i;\n\n  for (i = 0; i < acc.length; i++) {\n    acc[i].addEventListener(\"click\", function() {\n      this.classList.toggle(\"active\");\n      var panel = this.nextElementSibling;\n      if (panel.style.maxHeight) {\n        panel.style.maxHeight = null;\n      } else {\n        panel.style.maxHeight = panel.scrollHeight + \"px\";\n      }\n    });\n  }\n}());\n\n\n})(jQuery);\n"],"file":"scripts.js"}